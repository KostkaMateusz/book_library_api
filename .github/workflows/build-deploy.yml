name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: dev
    env:
      User: postgres
      Password: password123
      Port: 5432
      Database: book_library
      HOST: postgres
      SECRET_KEY: SOMERANDOMSTRING
      email_password: example
      sender_email: dev_email@example.com
      S3_BUCKET: booklibraryimagebucket
      S3_KEY: SOMEKEY
      S3_SECRET: SOMESECRETKEY
      S3_LOCATION: http://booklibraryimagebucket.s3.amazonaws.com/
      signature_version: s3v4
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: book_library
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: install python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: pytest tests

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask_book_library:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
